stages:
  - build
  # - test
  - image
  - test image
  # - deploy
  # - review

variables:
  CONTAINER_NAME: helloworld

main build:
  stage: build
  only:
    - main
  image: maven:3.8.3-openjdk-17
  script:
    - mvn clean package
    - cp target/*.jar app.jar
  artifacts:
    paths:
      - app.jar

# test build:
#   stage: test
#   only:
#     - main
#   image: maven:3.8.3-openjdk-17
#   script:
#     - java -jar app.jar &
#     - sleep 20
#     - curl --fail "http://localhost:8080/actuator/health"

build and push image:
  stage: image
  only:
    - main
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
    - echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
  script:
    - docker build -t $DOCKERHUB_IMAGE:v2 .
    - docker push $DOCKERHUB_IMAGE:v2

# test image:
#   stage: test image
#   only:
#     - main
#   image: docker
#   services:
#     - docker:dind
#   before_script:
#     - docker --version
#     - echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
#     - apk add curl
#   script:
#     - docker pull $DOCKERHUB_IMAGE
#     - docker run -d --name $CONTAINER_NAME -p 8080:8080 $DOCKERHUB_IMAGE
#     - sleep 20
#     - curl -v --fail "http://docker:8080/actuator/health"

scan image:
  stage: test image
  only:
    - main
  image: docker
  services:
    - docker:dind
  before_script:
    - docker --version
    - echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
    - apk add curl
  script:
    - docker pull $DOCKERHUB_IMAGE:v2
    - docker run --name trivy aquasec/trivy image $DOCKERHUB_IMAGE:v2 --format template --template "@contrib/html.tpl" -o report.html
    - docker cp trivy:report.html ./report.html
  artifacts:
    paths:
      - ./report.html
    reports:
      container_scanning: ./report.html
    when: always



# test vm connectivity:
#   stage: build
#   image: alpinelinux/ansible
#   script:
#     - echo $BASE64_CERT | base64 -d > key.pem
#     - chmod 400 key.pem
#     - export ANSIBLE_HOST_KEY_CHECKING=False
#     - sed -i "s/%%VM_IP%%/$VM_IP/g" inventory.ini
#     - ansible -i inventory.ini -m ping aws

# ansible deploy:
#   stage: deploy
#   image: alpinelinux/ansible
#   script:
#     - echo $BASE64_CERT | base64 -d > key.pem
#     - chmod 400 key.pem
#     - export ANSIBLE_HOST_KEY_CHECKING=False
#     - touch variables.json
#     - echo "{'REGISTRY_IMAGE':$DOCKERHUB_IMAGE, 'CONTAINER_NAME':$CONTAINER_NAME}" > variables.json
#     - sed -i "s/%%VM_IP%%/$VM_IP/g" inventory.ini
#     - ansible-playbook -i inventory.ini deploy-ansible.yml --extra-vars "@variables.json"

# review deployed application:
#   stage: review
#   image: alpine
#   before_script:
#     - apk add curl
#   script:
#     - curl -v --fail http://$VM_IP:8080/actuator/health